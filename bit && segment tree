/*
USER: Linus Martinez [linusma3]
TASK: 
LANG: C++
*/

#include <bits/stdc++.h>
#include <unordered_map>
#include <map>
#define ll long long
#include <string>
#include <cstdlib>
#include <iostream>
#include <vector>
#include <algorithm>
#include <set>

#define FOR(i,a,b) for (int i = (a); i < (b); i++)
#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)
#define FORE(i, a) for(auto i : a)  
#define FORC(cont, it) for(typeof((cont).begin()) it = (cont).begin(); it != (cont).end(); it++)
#define ull unsigned long long
#define ld long double
#define clr(v, d) memset(v, d, sizeof(v))
#define vt vector
#define pb push_back
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(),(v).end()
#define erase_duplicates(x) x.erase(unique(all(x)),x.end());
#define fi first
#define se second
#define mem(a,h)    memset(a,(h),sizeof(a))
#define deb(x) cout << #x << ": "<< x << '\n';
using namespace std;

using pi = pair<int,int>;
using pl = pair<ll,ll>;
using pd = pair<double,double>;

using vi = vt<int>;
using vb = vt<bool>;
using vl = vt<ll>;
using vd = vt<double>;
using vs = vt<string>;
using vpi = vt<pi>;
using vpl = vt<pl>;
using vpd = vt<pd>;

#define lb lower_bound
#define ub upper_bound
#define MOD 1000000007

const double PI = acos(-1.0);
const  int tam = 100010;

ll gcd(ll a, ll b){
    if(b == 0) return a;
    return gcd(b, a % b);
}

ll lcm(ll a, ll b){
    return b * (a / gcd(a, b));
}
//obtener el numero de bits de un numero

ll numBits(ll n){
    
    if(n==0){
        return n;
    }
    if(n>0){
        return 1+numBits(n&n-1);
    }

}

//suma ponderada desde 0 hasta n de la diferencia de bits entre cada numero
ll ans(ll n){
    if(n==0){
        return 0;
    }
    //????????????????????????????????????????????
    return n+ans(n/2);
}



/*

vector<bool>vis(100,false);

bool hasCycle(vector<bool>&vis,int curr,vector<int>&v){
    if(vis[curr]){
        return true;
    }
    vis[curr]=true;
    for(auto x:v[curr]){
        if(!vis[x]&& hasCycle(vis,x,v)){
            return true;
        }        
    }
    vis[curr]=false;

    return false;


}
*/

/*
void solve2(vector<int>&v,vector<int>&sub,vector<vector<int>>&res,int index,int target){
    if(target==0){
        res.pb(sub);    
    }


    for(int i = index;i<v.size();i++){
        
        sub.pb(v[i]);

        solve2(v,sub,res,i+1,target-v[i]);
        
        sub.pop_back();

    }


}

vector<vector<int>>subset(vector<int>&v,int &target){
    vector<int>sub;
    vector<vector<int>>res;
    solve2(v,sub,res,0,target);
    return res;
}

*/

struct node{
    ll data;
    node *left;
    node *right;

    node(ll val){
        data = val;
        left=NULL;
        right=NULL;
    }    

};
bool check(vector<vector<int>>&grid,int row,int col){
    for(int i = 0;i<grid.size();i++){
        if(grid[row][i]==1||grid[i][col]==1){
            return false;
        }
    }

    for(int i=row,j=col;i>-1 && j>-1;i--,j--){
        if(grid[i][j]==1){
            return false;
        }

    }
    for(int i=row,j=col;i>-1 && j<grid.size();i--,j++){
        if(grid[i][j]==1){
            return false;
        }

    }

    return true;



}
bool ans(vector<vector<int>>&grid,int row,int queens){
    if(queens>=grid.size()){
        FOR(i,0,grid.size()){
            FOR(j,0,grid.size()){
                cout << grid[i][j]<<" ";
            }
            cout <<"\n";
        }
        return true;
    }

    for(int j = 0;j<grid.size();j++){
        if(check(grid,row,j)){
            grid[row][j]=1;
            if(ans(grid,row+1,queens+1)){
                return true;
            }
            grid[row][j]=0;
        }
    }
    return false;

}
int bit[tam];
int t[4*tam];
int arr[tam];

/*

int query(int pos){
    int res = 0;
    for(int i =pos;i>0;i-=i&-i){
        res+=bit[i];
    }

    return res;
}
/*
void update(int pos,int val){
    for(int i = pos;i<tam; i+=i&-i){
        bit[i]+=val;
    }
}
*/







void init(int b,int e,int node){
    if(b==e){
        t[node]=arr[b];
        return;
    }

    int mid = (b+e)/2;
    int l = node*2+1;
    int r = l+1;
    init(b,mid,l);
    init(mid+1,e,r);
    t[node]=min(t[l],t[r]);
}


int query(int b,int e,int node,int i,int j){
    if(b>=i && e<=j){
        return t[node];
    }
    int mid = (b+e)/2;
    int l = node*2+1;
    int r = l+1;

    if(mid>=j){
       return query(b,mid,l,i,j);
    }

    if(mid<i){
       return query(mid+1,e,r,i,j);
    }

    return min(query(b,mid,l,i,j),query(mid+1,e,r,i,j));
}


void update(int b,int e,int node,int pos,int val){
    if(b==e){
        t[node]=val;
        return;
    }

    int mid = (b+e)/2;
    int l = node*2+1;
    int r =l+1;

    if(pos>mid){
        update(mid+1,e,r,pos,val);
    }else{
        update(b,mid,l,pos,val);
    }

    t[node]=min(t[l],t[r]);
}



void solve() {
    //ifstream fin("diamond.in"); 
  //  ofstream fout("diamond.out");
    int n;cin>>n;

    FOR(i,0,n){
        cin>>arr[i];
    }
    init(0,n-1,0);


  //  FOR(i,0,n){
    //    update(i+1,v[i]);
//}
//
    int q;cin>>q;

    while(q--){
        int l,r;cin>>l>>r;

        cout << query(0,n-1,0,l-1,r-1)<<"\n";

     // /   update(0,n-1,0,pos-1,val);
    }   





}

int main() {
    ios::sync_with_stdio(0); // cin && cout becomes faster
    cin.tie(0);//reduce runtime 
    int t = 1, i = 0;
  
    while (t--){
       solve();
    }
 
    return 0;
}









//THE WORLD IS YOURS
//Un Dia Comence A Correr...
